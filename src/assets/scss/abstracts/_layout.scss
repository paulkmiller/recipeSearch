// all non component specific layout rules
// 
// actually it's just all the rules until I
// get far enough to break them out into abstracts

@use './colors' as *;
@use './fonts' as *;

body {
  margin: 0;
  background: $msGreyLight;
  #app {
    max-width: 1920px;
    margin: 0 auto;
    main.main{
      display: grid;
      text-align: center;
      padding: 0.6em 1.2em;
      .routerLink{ 
        margin: 1em;
        a {
          display: inline-flex;
          flex-wrap: wrap;
          font-size: 1.5em;
          padding: 5px;
          transition: background-color 0.25s;
          &:is(:hover, :focus, :target, :active) {
            color: $msPrimary;
          }
          &:visited {
            color: $msInfo;
          }
        }
        &__lettersContainer{
          background: $msWhite;
          border-radius: 5px;
        }
      }
      input {
        width: 100%;
        align-items: center;
        border: 1px solid transparent;
        border-radius: 0.375em;
        box-shadow: none;
        display: inline-flex;
        height: 2.5em;
        justify-content: flex-start;
        padding-bottom: calc(0.25em - 1px);
        padding-left: calc(0.5em - 1px);
        padding-right: calc(0.5em - 1px);
        padding-top: calc(0.25em - 1px);
        position: relative;
        vertical-align: top;
        &.search {
          
        }
      }
    }
    footer {
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 64px;
      color: $msWhite;
      background: $msGreyDark;
    }
    button {
      border: 1px solid transparent;
      padding: 0.6em 1.2em;
      background-color: $msWhite;
      cursor: pointer;
      transition: border-color 0.25s;
      :hover {
        border-color: $msInfo;
      }
      :focus,
      :focus-visible {
        outline: 4px auto -webkit-focus-ring-color;
      }
    }
  }
}


@media (prefers-color-scheme: light) {
  :root {
    color: $msInfoDark;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

//
// eventual layout styles
*,
*::before,
*::after {
  box-sizing: border-box;
}

body,
h1,
h2,
h3,
h4,
p,
figure,
blockquote,
dl,
dd {
  margin: 0;
}

/* Remove list styles on ul, ol elements with a list role, 
which suggests default styling will be removed */
ul[role="list"],
ol[role="list"] {
  list-style: none;
}

/* Set core root defaults */
html:focus-within {
  scroll-behavior: smooth;
}

/* Set core body defaults */
body {
  min-height: 100vh;
  text-rendering: optimizeSpeed;
  line-height: 1.5;
}

/* A elements that don't have a class get default styles */
a:not([class]) {
  text-decoration-skip-ink: auto;
}

/* Make images easier to work with */
img,
picture {
  max-width: 100%;
  display: block;
}

/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */
@media (prefers-reduced-motion: reduce) {
  html:focus-within {
    scroll-behavior: auto;
  }

  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

.container {
  max-width: 100rem;
  margin-inline: auto;
  padding-inline: 2rem;
}

.stacked {
  display: grid;
}

.stacked > * {
  grid-column: 1 / 2;
  grid-row: 1 / 2;
}

.product-grid {
  display: grid;
  gap: 0.125rem;
  grid-template-columns: repeat(auto-fit, minmax(15rem, 1fr));
}

.main-title {
  background: linear-gradient(-45deg, blue, red);
  padding: 0.125em 0.5em;
  margin-bottom: 1em;
  width: fit-content;
}

p.max-content {
  width: max-content;
}

p.min-content {
  width: min-content;
}